% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotLayeredGraph.R
\name{plotLayeredGraph}
\alias{plotLayeredGraph}
\title{Plot a Directed Acyclic Graph with variables as nodes.}
\usage{
plotLayeredGraph(adjMatrix, blockList, ...)
}
\arguments{
\item{adjMatrix}{adjacency matrix for variables
columns are variables, rows are variables. Element(i,j) of matrix is 1 if there 
is an arrow from i to j. This means that for a DAG the matrix should be upper 
triangular.}

\item{blockList}{list of variables in each block (as input to \code{\link{rHESS_SEM}})}

\item{...}{formatting parameters to be passed to igraph plot function}
}
\value{
None
}
\description{
This function produces a Directed Acyclic Graph (DAG) based on an
adjacency matrix (using \code{\link{igraph}} package functions). The DAG layout
is a layered graph, where the layers correspond to the SEM blocks 
(as input to \code{\link{rHESS_SEM}}).

This function can be used to plot the input model (just displaying the variables
in each block and the DAG causal structure assumed), or the output model based
on an adjacency matrix found by thresholding the posterior inclusion
probabilities. It could also be used to plot a DAG using posterior regression
coefficients to define the presence or absence of an edge between nodes.
}
\examples{
require(utils)
dir.create("tmp")
data(sample_SEM)
write.table(sample_SEM,"tmp/sem_data.txt",row.names = FALSE,col.names = FALSE)
blockL = list( 
  c(9:28),  ## x0 -- block 0
  c(1:5),  ## y1 -- block 1
  c(6:8)  ## y2 -- block 2
)
G = matrix(c( 
  0,1,1,
  0,0,1,
  0,0,0 ), 
  byrow=TRUE,ncol=3,nrow=3)
  
## create input adjacency matrix for variables
inputAdj <- getInputGraph(blockList = blockL,blockGraph = G,varNames=names(sample_SEM))
## plot input graph with all variables
plotLayeredGraph(inputAdj,blockList = blockL)

## fit the Bayesian model
rBSEM::rHESS_SEM(inFile="tmp/sem_data.txt",blockList = blockL,
         SEMGraph = G,outFilePath="tmp/",nIter=50,method = 0,nChains = 2)
         
## get the marginal probabilities of inclusion (mPPIs)         
mPPIs <- getMeanGammas(blockList = blockL,blockGraph = G,outFilePath="tmp/",
         outFilePrefix="sem_data",varNames=names(sample_SEM))
## plot the output graph, thresholding mPPIs at 0.5
plotLayeredGraph(mPPIs>=0.5,blockList = blockL)
         
unlink("tmp", recursive=TRUE)
 

}
